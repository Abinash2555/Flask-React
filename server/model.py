from flask import  jsonify, request, session
from passlib.hash import pbkdf2_sha256 # this is used to encrpt password
import uuid # this is autogenerated id 
import pymongo # this is mangodb library for python

# Database
database = pymongo.MongoClient('localhost', 27017) # database is connection by this line
db = database.user_data # table is selected by this line



class User:
    # User get session while login
    def start_session(self, user):
        del user['password']
        session['logged_in'] = True
        session['user'] = user
        return jsonify(user), 200

    # this used to save the data in database while send from client while signup
    def signup(self):
        data=request.get_json() 

       # Create the user object
        user = {
        "_id": uuid.uuid4().hex,
        "email": data.get('email'),
        "firstName": data.get('firstName'),
        "lastName": data.get('lastName'),
        "password": data.get('password'),
        "username": data.get('username'),
        }
         # Encrypt the password before it save to database
        user['password'] = pbkdf2_sha256.encrypt(user['password']) 

        # Check for existing email address 
        if db.users.find_one({ "email": user['email'] }):
            return jsonify({ "danger": "Email address already in use" }), 400 #400 is http error code

        if db.users.find_one({ "username": user['username'] }):
            return jsonify({ "danger": "Username already exists" }), 400

        # if user is not exists than data is save by this line and start new sessions
        if db.users.insert_one(user): 
            return self.start_session(user)
            
        return jsonify({ "message": "Signup failed" }), 400

        #this is used to login user 
    def login(self):
        data=request.get_json()
        user = db.users.find_one({
        "email": data.get('email')
        })

        if user and pbkdf2_sha256.verify(data.get('password'), user['password']):
            return self.start_session(user)
        
        return jsonify({ "error": "Invalid login credentials" }), 401 # this is occured due to valid authentication credentials for the requested resource
    def signout(self):
        session.clear()
        return jsonify({ "Success": "Username is logout" }), 200 # 200 is success response of http



